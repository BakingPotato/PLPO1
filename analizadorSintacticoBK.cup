import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;

parser code {: //Tratamiento de errores
public String fileName;
public void syntax_error(Symbol s) {
	System.err.println("Error de sintaxis (lexema <" + s.value.toString() + ">) en la linea " + s.left + " y en la columna " + s.right);
	System.err.println("Error recuperado");
}

public void unrecovered_syntax_error(Symbol s){
	System.err.println("Error de sintaxis no recuperable");
}
:};


/* Terminales */
terminal program, begin, end, const_, var, procedure, function, unit;
terminal if_, then, else_, while_, do_, repeat, until, to, downto ,bucle_for;
terminal integer, real, div, mod, or, and, not, lt, gt, let, bet;
terminal igual, op_mas, op_men, op_mul, coma, punto, dos_puntos, punto_coma, dos_p_igual, ab_parentesis, cr_parentesis;
terminal String identifier, string_const, numeric_integer_const, numeric_real_const;

/* No terminales */
non terminal Funcion PRG, BLQ, DCL, DCLLIST, DEFCTE, CTELIST, DEFPROC, DEFFUN, DEFVAR, DEFVARLIST, SENTLIST;
non terminal Simbolo SIMPVALUE, TBAS, INC, OP, OPARIT, ID, OPLOG, OPCOMP;
non terminal Sentencia VARLIST, SENT, FORMAL_PARAM, FORMAL_PARAMLIST, ASIG, SUBPPARAMLIST, EXPCOND, EXP, EXPLIST, PROC_CALL, FACTOR, FACTORCOND;

/* Precedences */
precedence left lt, gt, let, bet;
precedence left op_mas, op_men, or;
precedence left op_mul, div, mod, and;
precedence left not;

precedence left error;

/* Grammar */
start with PRG;

PRG ::= program identifier punto_coma BLQ:blq punto  {:
try{
        File dir = new File("./");
        dir.mkdirs();
        File file = new File(dir, fileName+".c");
        file.createNewFile();
        BufferedWriter bw = new BufferedWriter(new FileWriter(file));
        bw.write(blq.reestructurar());
        bw.close();
}catch (IOException e){
            System.out.print("Error");
}
        //System.out.print(blq.reestructurar());
    :}
    | unit identifier:id punto_coma DCLLIST:dcl punto {:
        Funcion f = new Funcion();
        Sentencia sent = new Sentencia();
        sent.simbolos.add(new Simbolo("// Libreria: "+id));
        f.declaraciones.add(sent);
        f.declaraciones.addAll(dcl.declaraciones);
        try{
                File dir = new File("./");
                dir.mkdirs();
                File file = new File(dir, fileName+".c");
                file.createNewFile();
                BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                bw.write(f.reestructurar());
                bw.close();
        }catch (IOException e){
                    System.out.print("Error");
        }
        //System.out.print(f.reestructurar());
    :};

BLQ ::= DCLLIST:dcl begin SENTLIST:listaS end {:
         Funcion blq = new Funcion();
         blq.declaraciones = dcl.declaraciones;
         if (!listaS.declaraciones.isEmpty())
             blq.bloque.addAll(listaS.declaraciones);
         blq.bloque.addAll(listaS.bloque);
         RESULT = blq;
    :} | error end;

DCLLIST ::= /* lambda */ {: RESULT = new Funcion(); :}
    | DCLLIST:dl DCL:d {:
        if(d.esFuncion){
            dl.declaraciones.add(d.cabecera);
            dl.declaraciones.addAll(d.declaraciones);
            dl.declaraciones.addAll(d.bloque);
        }else
            dl.declaraciones.addAll(d.declaraciones);
        RESULT = dl;
    :};

SENTLIST ::= SENT:s {:
        Funcion f = new Funcion();
        if (s.esFuncion)
            f.declaraciones.add(s);
        else if (s.esControlFlujo){
            f.bloque.add(s);
            if (!s.sentList.isEmpty())
                f.bloque.addAll(s.sentList);
        }else{
            f.bloque.add(s);
        }
        RESULT = f;
    :}
    | SENTLIST:listaS SENT:s {:
        if (s.esFuncion){
            listaS.declaraciones.add(s);
        }else if (s.esControlFlujo){
            listaS.bloque.add(s);
            if (!s.sentList.isEmpty()){
                listaS.bloque.addAll(s.sentList);
            }
        }else{
            listaS.bloque.add(s);
        }
        RESULT = listaS;
    :} ;

// Zona de declaraciones
DCL ::= DEFCTE:d  {: RESULT = d; :}
      | DEFVAR:d  {: RESULT = d; :}
      | DEFPROC:d {: RESULT = d; :}
      | DEFFUN:d  {: RESULT = d; :};

DEFCTE ::= const_ CTELIST:cl {: RESULT = cl; :};

CTELIST ::= identifier:id igual SIMPVALUE:sv punto_coma {:
        Funcion f = new Funcion();
        Sentencia cteAct = new Sentencia();

        Simbolo i = new Simbolo(id + " ");
        i.esId = true;

        cteAct.simbolos.add(new Simbolo("#define "));
        cteAct.simbolos.add(i);
        cteAct.simbolos.add(sv);

        f.declaraciones.add(cteAct);
        RESULT = f;
    :}
    | CTELIST:cl identifier:id igual SIMPVALUE:sv punto_coma {:
        Funcion f = new Funcion();
        Sentencia cteAct = new Sentencia();

        Simbolo i = new Simbolo(id + " ");
        i.esId = true;

        cteAct.simbolos.add(new Simbolo("#define "));
        cteAct.simbolos.add(i);
        cteAct.simbolos.add(sv);

        f.declaraciones.addAll(cl.declaraciones);
        f.declaraciones.add(cteAct);
        RESULT = f;
    :} | error punto_coma;

SIMPVALUE ::= numeric_integer_const:ci {:
        Simbolo s = new Simbolo();
        s.valor = ci;
        RESULT = s;
   :}
    | numeric_real_const:cr {:
        Simbolo s = new Simbolo();
        s.valor = cr;
        RESULT = s;
    :}
    | string_const:cs {:
       Simbolo s = new Simbolo();
       s.valor = cs;
       RESULT = s;
    :} ;

DEFVAR ::= var DEFVARLIST:d punto_coma {: RESULT = d; :};

DEFVARLIST ::= VARLIST:v dos_puntos TBAS:t {:
       Funcion f = new Funcion();
       Sentencia sv = new Sentencia();

       Simbolo pc = new Simbolo(";");
       pc.esPyC = true;

       sv.simbolos.add(t);
       sv.simbolos.addAll(v.simbolos);
       sv.simbolos.add(pc);

       f.declaraciones.add(sv);

       RESULT = f;
    :}
    | DEFVARLIST:dvl punto_coma VARLIST:v dos_puntos TBAS:t {:
        Funcion f = new Funcion();
        Sentencia sv = new Sentencia();

        Simbolo pc = new Simbolo(";");
        pc.esPyC = true;

        sv.simbolos.add(t);
        sv.simbolos.addAll(v.simbolos);
        sv.simbolos.add(pc);

        f.declaraciones.addAll(dvl.declaraciones);
        f.declaraciones.add(sv);

        RESULT = f;
    :};

VARLIST ::= identifier:i {:
       Simbolo s = new Simbolo(i);
       s.esId = true;
       s.esUltimo = true;

       Sentencia sent = new Sentencia();
       sent.simbolos.add(s);
       RESULT = sent;
    :}
    | identifier:i coma VARLIST:vl {:
       Simbolo s = new Simbolo(i);
       s.esId = true;

       Sentencia sent = new Sentencia();
       sent.simbolos.add(s);
       sent.simbolos.add(new Simbolo(", "));
       sent.simbolos.addAll(vl.simbolos);
       RESULT = sent;
    :} ;

DEFPROC ::= procedure identifier:i FORMAL_PARAMLIST:fpl punto_coma BLQ:blq punto_coma {:
        Sentencia a = new Sentencia();
        a.esApertura = true;
        a.simbolos.add(new Simbolo("{"));

        Sentencia c = new Sentencia();
        c.esCierre = true;
        c.simbolos.add(new Simbolo("}"));

        Sentencia def = new Sentencia();
        def.simbolos.add(new Simbolo("void "));
        def.simbolos.add(new Simbolo(i));
        def.simbolos.addAll(fpl.simbolos);
        if(fpl.esVacia){
            def.esLlamadaVacia = true;
        }

        Funcion deffun = new Funcion();
        deffun.cabecera = def;
        deffun.declaraciones.add(a);
        deffun.declaraciones.addAll(blq.declaraciones);
        deffun.bloque.addAll(blq.bloque);
        deffun.bloque.add(c);
        deffun.esFuncion = true;

        RESULT = deffun;
    :};

DEFFUN ::=  function identifier:i FORMAL_PARAMLIST:fpl dos_puntos TBAS:t punto_coma BLQ:blq punto_coma {:
        Simbolo id = new Simbolo(i);
        id.esIdFuncion = true;

        Sentencia a = new Sentencia();
        a.esApertura = true;
        a.simbolos.add(new Simbolo("{"));

        Sentencia c = new Sentencia();
        c.esCierre = true;
        c.simbolos.add(new Simbolo("}"));

        Sentencia def = new Sentencia();
        def.simbolos.add(t);
        def.simbolos.add(id);
        def.simbolos.addAll(fpl.simbolos);
        def.esFuncion = true;
        if(fpl.esVacia){
            def.esLlamadaVacia = true;
        }

        Funcion deffun = new Funcion();
        deffun.cabecera = def;
        deffun.declaraciones.add(a);
        deffun.declaraciones.addAll(blq.declaraciones);
        deffun.bloque.addAll(blq.bloque);
        deffun.bloque.add(c);
        deffun.esFuncion = true;

        RESULT = deffun;
    :};

FORMAL_PARAMLIST ::= ab_parentesis FORMAL_PARAM:fp cr_parentesis {:
        Sentencia fpl = new Sentencia();
        fpl.simbolos.add(new Simbolo("("));
        fpl.simbolos.addAll(fp.simbolos);
        fpl.simbolos.add(new Simbolo(")"));
        RESULT = fpl;
    :}
    | /* lambda */ {:
        Sentencia fpl = new Sentencia();
        fpl.simbolos.add(new Simbolo("( void )"));
        fpl.esVacia = true;
        RESULT = fpl;
    :};

FORMAL_PARAM ::= VARLIST:vl dos_puntos TBAS:t {:
        Sentencia f = new Sentencia();
        int i = 1;
        for (Simbolo aux : vl.simbolos){
            i++;
            if(aux.esId && aux.esUltimo){ //Comprobamos que aux es Id para evitar las comas guardadas en VARLIST
                f.simbolos.add(t);
                f.simbolos.add(aux);
            }else if(aux.esId){
                f.simbolos.add(t);
                f.simbolos.add(aux);
                f.simbolos.add(new Simbolo(", "));
            }
        }
        RESULT = f;
    :}
    | VARLIST:vl dos_puntos TBAS:t punto_coma FORMAL_PARAM:fp {:
        Sentencia f = new Sentencia();

        for (Simbolo aux : vl.simbolos){
            if(aux.esId){ //Comprobamos que aux es Id para evitar las comas guardadas en VARLIST
                f.simbolos.add(t);
                f.simbolos.add(aux);
                f.simbolos.add(new Simbolo(", "));
            }
        }

        f.simbolos.addAll(fp.simbolos);

        RESULT = f;
    :};

TBAS ::= integer  {: RESULT = new Simbolo("int "); :}
    | real {: RESULT = new Simbolo("float "); :};

// Zona de sentencias
SENT ::= ASIG:a punto_coma  {:
        Simbolo s = new Simbolo(";");
        s.esPyC = true;

        Sentencia sent = new Sentencia();
        sent.simbolos.addAll(a.simbolos);
        sent.simbolos.add(s);
        sent.esAsignacion = true;
        RESULT = sent;
    :}
    | PROC_CALL:pc punto_coma {:
        Simbolo s = new Simbolo(";");
        s.esPyC = true;

        Sentencia sent = new Sentencia();
        sent.simbolos.addAll(pc.simbolos);
        sent.simbolos.add(s);
        RESULT = sent;
    :}
    | if_ EXPCOND:cond then BLQ:blq else_ BLQ:blq2 {:
        Sentencia a = new Sentencia();
        a.esApertura = true;
        a.simbolos.add(new Simbolo("{"));

        Sentencia c = new Sentencia();
        c.esCierre = true;
        c.simbolos.add(new Simbolo("}"));

        Sentencia el = new Sentencia();
        el.simbolos.add(new Simbolo("else{"));
        el.esApertura = true;

        Sentencia sent = new Sentencia();
        sent.simbolos.add(new Simbolo("if ("));
        sent.simbolos.addAll(cond.simbolos);
        sent.simbolos.add(new Simbolo(")"));
        sent.sentList.add(a);
        sent.esControlFlujo = true;

        for (Sentencia s : blq.declaraciones){
            sent.sentList.add(s);
        }

        for (Sentencia s : blq.bloque){
            sent.sentList.add(s);
        }

        sent.sentList.add(c);
        sent.sentList.add(el);

        for (Sentencia s : blq2.declaraciones){
            sent.sentList.add(s);
        }

        for (Sentencia s : blq2.bloque){
            sent.sentList.add(s);
        }
        sent.sentList.add(c);
        RESULT = sent;
    :}
    | while_ EXPCOND:cond do_ BLQ:blq  {:
        Sentencia sent = new Sentencia();

        Sentencia a = new Sentencia();
        a.esApertura = true;
        a.simbolos.add(new Simbolo("{"));

        Sentencia c = new Sentencia();
        c.esCierre = true;
        c.simbolos.add(new Simbolo("}"));

        sent.simbolos.add(new Simbolo("while ("));
        sent.simbolos.addAll(cond.simbolos);
        sent.simbolos.add(new Simbolo(")"));
        sent.sentList.add(a);
        sent.esControlFlujo = true;

        for (Sentencia s : blq.declaraciones){
            sent.sentList.add(s);
        }

        for (Sentencia s : blq.bloque){
            sent.sentList.add(s);
        }

        sent.sentList.add(c);
        RESULT = sent;
    :}
    | repeat BLQ:blq until EXPCOND:cond punto_coma  {:
        Sentencia sent = new Sentencia();

        Sentencia c = new Sentencia();
        c.simbolos.add(new Simbolo("} until ("));
        c.esCierre = true;

        sent.simbolos.add(new Simbolo("do {"));
        sent.esControlFlujo = true;
        sent.esApertura = true;

        for (Sentencia s : blq.declaraciones){
            sent.sentList.add(s);
        }

        for (Sentencia s : blq.bloque){
            sent.sentList.add(s);
        }
        c.simbolos.addAll(cond.simbolos);
        c.simbolos.add(new Simbolo(")"));
        sent.sentList.add(c);
        RESULT = sent;
    :}
    | bucle_for identifier:id dos_p_igual EXP:exp1 INC:inc EXP:exp2 do_ BLQ:blq  {:
        Sentencia cond = new Sentencia();
        cond.simbolos.add(new Simbolo("for (" + id + "="));
        cond.simbolos.addAll(exp1.simbolos);
        cond.simbolos.add(new Simbolo("; "+id + inc.valor));
        cond.simbolos.addAll(exp2.simbolos);
        cond.simbolos.add(new Simbolo("; "+id+"="+id+inc.valor2+")"));

        Sentencia a = new Sentencia();
        a.simbolos.add(new Simbolo("{"));
        a.esApertura = true;

        Sentencia c = new Sentencia();
        c.simbolos.add(new Simbolo("}"));
        c.esCierre = true;

        Sentencia sent = new Sentencia();
        sent.simbolos.addAll(cond.simbolos);
        sent.sentList.add(a);
        sent.esControlFlujo = true;

        for (Sentencia s : blq.declaraciones){
            sent.sentList.add(s);
        }

        for (Sentencia s : blq.bloque){
            sent.sentList.add(s);
        }
        sent.sentList.add(c);
        RESULT = sent;
    :};

INC ::= to {:
        Simbolo s = new Simbolo("<");
        s.valor2 = "+1";
        RESULT = s;
    :}
     | downto {:
        Simbolo s = new Simbolo(">");
        s.valor2 = "-1";
        RESULT = s;
    :};

ASIG ::= ID:id dos_p_igual EXP:exp {:
        Simbolo s = new Simbolo(" = ");
        s.esAsignacion = true;

        Sentencia e = new Sentencia();
        e.simbolos.add(id);
        e.simbolos.add(s);
        e.simbolos.addAll(exp.simbolos);
        RESULT = e;
    :} ;

ID ::= identifier:id {:
       Simbolo s = new Simbolo(id);
       s.esIdAsig = true;
       RESULT = s;
    :};

EXP ::= EXP:e1 OP:op EXP:e2 {:
       Sentencia e = new Sentencia();
       e.simbolos.addAll(e1.simbolos);
       e.simbolos.add(op);
       e.simbolos.addAll(e2.simbolos);
       RESULT = e;
    :}
    | FACTOR:fact {: RESULT = fact; :} ;


OP ::= OPARIT:o {: RESULT = o; :};

OPARIT ::= op_mas{: RESULT = new Simbolo(" + "); :}
    | op_men{: RESULT = new Simbolo(" - "); :}
    | op_mul {: RESULT = new Simbolo(" * "); :}
    | div {: RESULT = new Simbolo(" / "); :}
    | mod {: RESULT = new Simbolo(" % "); :};

FACTOR ::= SIMPVALUE:sv {:
         Sentencia e = new Sentencia();
         e.simbolos.add(sv);
         RESULT = e;
    :}
    | ab_parentesis EXP:exp cr_parentesis {:
        Sentencia e = new Sentencia();
        e.simbolos.addAll(exp.simbolos);
        RESULT = e;
    :}
    | identifier:id SUBPPARAMLIST:spl {:
        Simbolo i = new Simbolo(id);
        i.esId = true;

        Sentencia e = new Sentencia();
        e.simbolos.add(i);
        e.simbolos.addAll(spl.simbolos);
        RESULT = e;
    :} ;

SUBPPARAMLIST ::= ab_parentesis EXPLIST:el cr_parentesis{:
        Sentencia e = new Sentencia();
        e.simbolos.add(new Simbolo("("));
        e.simbolos.addAll(el.simbolos);
        e.simbolos.add(new Simbolo(")"));
        RESULT = e;
    :}
    | /*lambda*/ {: RESULT = new Sentencia(); :} ;

EXPLIST ::= EXP:exp {: RESULT = exp;    :}
    | EXP:exp coma EXPLIST:expl {:
        Sentencia e = new Sentencia();
        e.simbolos.addAll(exp.simbolos);
        e.simbolos.add(new Simbolo(","));
        e.simbolos.addAll(expl.simbolos);
        RESULT = e;
     :};

PROC_CALL ::= identifier:id SUBPPARAMLIST:spl {:
        Simbolo i = new Simbolo(id);
        i.esId = true;

        Sentencia e = new Sentencia();
        e.simbolos.add(i);
        e.simbolos.addAll(spl.simbolos);
        RESULT = e;
    :};

// Comprobacion de Sentenciaes condicionales (opcional)
EXPCOND ::= EXPCOND:e1 OPLOG:op EXPCOND:e2 {:
        Sentencia e = new Sentencia();
        e.simbolos.addAll(e1.simbolos);
        e.simbolos.add(op);
        e.simbolos.addAll(e2.simbolos);
        RESULT = e;
    :}
    | FACTORCOND:fc {: RESULT = fc; :};

OPLOG ::= or {: RESULT = new Simbolo(" || "); :}
    | and {: RESULT = new Simbolo(" && "); :};

FACTORCOND ::= EXP:e1 OPCOMP:op EXP:e2 {:
       Sentencia e = new Sentencia();
       e.simbolos.addAll(e1.simbolos);
       e.simbolos.add(op);
       e.simbolos.addAll(e2.simbolos);
       RESULT = e;
    :}
    | ab_parentesis EXP:exp cr_parentesis {:
        Sentencia e = new Sentencia();
        e.simbolos.add(new Simbolo("("));
        e.simbolos.addAll(exp.simbolos);
        e.simbolos.add(new Simbolo(")"));
        RESULT = e;
    :}
    | not FACTORCOND:fc {:
        Sentencia e = new Sentencia();
        e.simbolos.add(new Simbolo("!"));
        e.simbolos.addAll(fc.simbolos);
        RESULT = e;
    :};

OPCOMP ::= lt  {: RESULT = new Simbolo(" < "); :}
    | gt  {: RESULT = new Simbolo(" > "); :}
    | let {: RESULT = new Simbolo(" <= "); :}
    | bet {: RESULT = new Simbolo(" >= "); :}
    | igual {: RESULT = new Simbolo(" == "); :};