import java_cup.runtime.*;
import java.util.LinkedList;

parser code {: //Tratamiento de errores
public String fileName;
public void syntax_error (Symbol s){
	System.err.println("Error de sintaxis (lexema <" + s.value.toString() + ">) en la linea " + s.left + " y en la columna " + s.right);
	System.err.println("Error recuperado");
}

public void unrecovered_syntax_error(Symbol s){
	System.err.println("Error de sintaxis no recuperable");
}
:};


/* Terminales */
terminal program, begin, end, const_, var, procedure, function, unit;
terminal if_, then, else_, while_, do_, repeat, until, to, downto ,bucle_for;
terminal integer, real, div, mod, or, and, not, lt, gt, let, bet;
terminal igual, op_mas, op_men, op_mul, coma, punto, dos_puntos, punto_coma, dos_p_igual, ab_parentesis, cr_parentesis;
terminal String identifier, string_const, numeric_integer_const, numeric_real_const;

/* No terminales */
non terminal Incremento INC;
non terminal VarList VARLIST;
non terminal Bloque PRG, BLQ, DCLLIST, SENTLIST;
non terminal Function DCL, DEFCTE, CTELIST, DEFPROC, DEFFUN, DEFVAR, DEFVARLIST, FORMAL_PARAM, FORMAL_PARAMLIST;
non terminal Simbolo SIMPVALUE, TBAS, OP, OPARIT, ID, OPLOG;

non terminal Sentencia SENT, ASIG, SUBPPARAMLIST, EXPCOND, EXP, EXPLIST, PROC_CALL, FACTOR, FACTORCOND;
non terminal StringBuilder OPCOMP;

/* Precedences */
precedence left lt, gt, let, bet;
precedence left op_mas, op_men, or;
precedence left op_mul, div, mod, and;
precedence left not;

/* Grammar */
start with PRG;

PRG ::= program identifier punto_coma BLQ:blq punto  {:
            System.out.print(blq.returnSB()); //llamamos a returnSB sin argumento porque no es una función
        :}
        | unit identifier:id punto_coma DCLLIST:dl punto {:
            StringBuilder s = new StringBuilder("// Librería: ").append(id).append("\n").append(dl);
            System.out.print(s.append(dl.returnSB()));
        :};

BLQ ::= DCLLIST:d begin SENTLIST:s end {:
            s.dclList = d.dclList;
            RESULT = s;
        :} ;

DCLLIST ::= /* lambda */ {:
                RESULT = new Bloque();
            :}
            | DCLLIST:dl DCL:d {:
                dl.dclList.add(d);
                RESULT = dl;
            :};

SENTLIST ::= SENT:s {:
                Bloque b = new Bloque();
                b.sentList.add(s);
                RESULT = b;
            :}
            | SENTLIST:sl SENT:s {:
                sl.sentList.add(s);
                RESULT = sl;
            :} ;

// Zona de declaraciones
DCL ::= DEFCTE:d  {: RESULT = d; :}
      | DEFVAR:d  {: RESULT = d; :}
      | DEFPROC:d {: RESULT = d; :}
      | DEFFUN:d  {: RESULT = d; :} ;

DEFCTE ::= const_ CTELIST:cl {: RESULT = cl; :} ;

CTELIST ::= identifier:id igual SIMPVALUE:sv punto_coma {:
                VarList v = new VarList();
                v.vars.add(id + " " + sv.valor);
                v.isDef = true;
                Function f = new Function();
                f.varLists.add(v); // varLists puede tener varias varList, en este caso particular solo tendrá una (con varias variables)
                RESULT = f;
            :}
            | CTELIST:cl identifier:id igual SIMPVALUE:sv punto_coma {:
                VarList v = new VarList();
                v.vars.add(id + " " + sv.valor);
                v.isDef = true;
                cl.varLists.add(v);
                RESULT = cl;
            :} ;

SIMPVALUE ::= numeric_integer_const:i1 {:
                Simbolo s = new Simbolo();
                s.tipo = Simbolo.TipoSim.T_INTEGER;
                s.valor = new StringBuilder(i1);
                RESULT = s; :}
            | numeric_real_const:r1 {:
                Simbolo s = new Simbolo();
                s.tipo = Simbolo.TipoSim.T_FLOAT;
                s.valor = new StringBuilder(r1);
                RESULT = s; :}
            | string_const:s1 {:  Simbolo s = new Simbolo();
                s.tipo = Simbolo.TipoSim.T_STRING;
                s.valor = new StringBuilder(s1);
                RESULT = s;
            :} ;

DEFVAR ::= var DEFVARLIST:d punto_coma {: RESULT = d; :} ;

DEFVARLIST ::= VARLIST:v dos_puntos TBAS:t {:
                v.tipo = t.valor.toString();
                Function f = new Function();
                f.varLists.add(v);
                RESULT = f;
            :}
            | DEFVARLIST:dvl punto_coma VARLIST:vl dos_puntos TBAS:t {:
                vl.tipo = t.valor.toString();
                dvl.varLists.add(vl);
                RESULT = dvl;
            :} ;

VARLIST ::= identifier:i {:
                VarList vl = new VarList();
                vl.vars.push(i);
                RESULT = vl;
            :}
            | identifier:i coma VARLIST:vl {:
                vl.vars.push(i);
                RESULT = vl;
            :} ;

DEFPROC ::= procedure identifier:i FORMAL_PARAMLIST:fpl punto_coma BLQ:blq punto_coma {:
                fpl.type = "void";
                fpl.name = i;
                fpl.bloque = blq;
                RESULT = fpl;
            :} ;

DEFFUN ::=  function identifier:i FORMAL_PARAMLIST:fpl dos_puntos TBAS:t punto_coma BLQ:blq punto_coma {:
                blq.id = i;
                fpl.type = t.valor.toString();
                fpl.name = i;
                fpl.bloque = blq;
                RESULT = fpl;
            :};

FORMAL_PARAMLIST ::= ab_parentesis FORMAL_PARAM:fp cr_parentesis {: RESULT = fp; :}
                    | /* lambda */ {: RESULT = new Function(); :} ;

FORMAL_PARAM ::= VARLIST:vl dos_puntos TBAS:t {:
                    vl.tipo = t.valor.toString();
                    Function f = new Function();
                    f.varLists.add(0, vl);
                    RESULT = f;
                :}
                | VARLIST:vl dos_puntos TBAS:t punto_coma FORMAL_PARAM:fp {:
                    vl.tipo = t.valor.toString();
                    fp.varLists.add(0, vl);
                    RESULT = fp;
                :};

TBAS ::= integer  {:
            Simbolo s = new Simbolo();
            s.tipo = Simbolo.TipoSim.T_STRING;
            s.valor = new StringBuilder("int");
            RESULT = s; :}
        | real {:
            Simbolo s = new Simbolo();
            s.tipo = Simbolo.TipoSim.T_STRING;
            s.valor = new StringBuilder("float");
            RESULT = s;
        :} ;

// Zona de sentencias
SENT ::= ASIG:a punto_coma  {:
        a.valor.append(";");
        RESULT = a;
    :}
    | PROC_CALL:pc punto_coma {:
        pc.valor.append(";");
        RESULT = pc;
    :}
    | if_ EXPCOND:ec then BLQ:blq1 else_ BLQ:blq2 {:
        Sentencia e = new Sentencia();
        e.valor.append("if("+ec.valor+")"+blq1.returnSB()+"else"+blq2.returnSB());
        RESULT = e;
    :}
    | while_ EXPCOND:ec do_ BLQ:blq  {:
        Sentencia e = new Sentencia();
        e.valor.append("while(").append(ec.valor).append(")\n").append(blq.returnSB());
        RESULT = e;
    :}
    | repeat BLQ:blq until EXPCOND:ec punto_coma  {:
        Sentencia e = new Sentencia();
        e.valor.append("do\n").append(blq.returnSB()).append("\nuntil(").append(ec.valor).append(")");
        RESULT = e;
    :}
    | bucle_for identifier:id dos_p_igual EXP:exp1 INC:inc EXP:exp2 do_ BLQ:blq  {:
        Sentencia s = new Sentencia();
        s.valor.append("for (").append(id).append("=").append(exp1.valor).append("; ").append(id).append(inc.op);
        s.valor.append(exp2.valor).append(inc.valor).append("; ").append(id).append("=").append(id).append(inc.valor).append(")");
        s.valor.append(blq.returnSB());
        RESULT = s;
    :};

INC ::= to {: RESULT = new Incremento('<', "+1"); :}
     | downto {: RESULT = new Incremento('>', "-1"); :};

ASIG ::= ID:id dos_p_igual EXP:exp {:
            StringBuilder valor = new StringBuilder(exp.valor);
            RESULT = new Sentencia(id.valor, valor, true);
        :};

ID ::= identifier:id {:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder(id);
            RESULT = s;
        :};

EXP ::= EXP:e1 OP:op EXP:e2 {:
            e1.valor.append(" ").append(op.valor).append(" ").append(e2.valor);
            RESULT = e1;
        :}
        | FACTOR:fact {: RESULT = fact; :} ;


OP ::= OPARIT:o {: RESULT = o; :};

OPARIT ::= op_mas{:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder("+");
            RESULT = s;
        :}
        | op_men{:
           Simbolo s = new Simbolo();
           s.valor = new StringBuilder("-");
           RESULT = s;
        :}
        | op_mul {:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder("*");
            RESULT = s;
        :}
        | div {:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder("/");
            RESULT = s;
        :}
        | mod {:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder("%");
            RESULT = s;
        :} ;

FACTOR ::= SIMPVALUE:sv {:
            RESULT = new Sentencia(sv.valor);
        :}
        | ab_parentesis EXP:exp cr_parentesis {:
            Sentencia e = new Sentencia();
            e.valor.append("(").append(exp.valor).append(")");
            RESULT = e;
        :}
        | identifier:id SUBPPARAMLIST:spl {:
            Sentencia e = new Sentencia();
            e.valor.append(id).append(" ").append(spl.valor);
            RESULT = e;
        :} ;

SUBPPARAMLIST ::= ab_parentesis EXPLIST:el cr_parentesis{:
                    Sentencia e = new Sentencia();
                    e.valor.append(" ( ").append(el.valor).append(" ) ");
                    RESULT = e;
                :}
                | /*lambda*/ {:
                    RESULT = new Sentencia();
                :} ;

EXPLIST ::= EXP:exp {:
                RESULT = exp;
            :}
            | EXP:exp coma EXPLIST:expl {:
                exp.valor.append(", ").append(expl.valor);
                RESULT = exp;
             :};

PROC_CALL ::= identifier:id SUBPPARAMLIST:spl {:
                Sentencia s = new Sentencia();
                s.valor.append(id).append(" ").append(spl.valor);
                RESULT = s;
            :};

// Comprobacion de Sentenciaes condicionales (opcional)
EXPCOND ::= EXPCOND:exp1 OPLOG:op EXPCOND:exp2 {:
                exp1.valor.append(" ").append(op.valor).append(" ").append(exp2.valor);
                RESULT = exp1;
            :}
            | FACTORCOND:fc {:
                RESULT = fc;
            :};

OPLOG ::= or {:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder("||");
            RESULT = s;
        :}
        | and {:
            Simbolo s = new Simbolo();
            s.valor = new StringBuilder("&&");
            RESULT = s;
        :} ;

FACTORCOND ::= EXP:e1 OPCOMP:op EXP:e2 {:
                e1.valor.append(op).append(e2.valor);
                RESULT = e1;
            :}
            | ab_parentesis EXP:exp cr_parentesis {:
                Sentencia s = new Sentencia();
                s.valor.append("(").append(exp.valor).append(")");
                RESULT = s;
            :}
            | not FACTORCOND:fc {:
                Sentencia s = new Sentencia();
                s.valor.append("!").append(fc.valor);
                RESULT = s;
            :};

OPCOMP ::= lt  {: RESULT = new StringBuilder("<"); :}
        | gt  {: RESULT = new StringBuilder(">"); :}
        | let {: RESULT = new StringBuilder("<="); :}
        | bet {: RESULT = new StringBuilder(">="); :}
        | igual {: RESULT = new StringBuilder("=="); :};
